/* The following code was generated by JFlex 1.3.5 on 21/09/18 9:20 */

package AS;
import static AS.Token.*; 


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 21/09/18 9:20 from the specification file
 * <tt>file:/C:/077CA/AnalizadorSintactico/src/AS/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 27, 27,  0,  0, 27,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  0,  0,  0,  0,  0,  0,  0,  0,  0, 11,  9, 10, 11,  0, 11, 
     3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 12,  7,  8, 13,  8,  0, 
     0,  2,  2,  2,  2,  2, 14,  2,  2,  2,  2,  2,  2,  2,  2,  2, 
     2,  2,  2,  2,  2,  2,  2, 26,  2,  2,  2,  0,  0,  0,  0,  4, 
     0, 17, 23,  2,  2, 20, 25,  2, 18, 24,  2,  2, 19,  2, 21, 15, 
     2,  2, 16,  2, 22,  2,  2,  2,  2,  2,  2,  5,  0,  6,  0,  0
  };

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    28,    28,    56,    84,   112,   140,   168,   196,    56, 
      224,   252,   280,   308,   336,   364,   392,   420,   448,   476, 
      504,   532,   560,   588,   616,   644,   672,   700,   728,    28, 
      756,   784,   812,   840,   868,   896,   924,   952,   980,  1008, 
     1036,  1064,  1092,  1120,  1148,  1176,  1204,  1232,  1260,  1288, 
     1316,  1344,  1372,  1400,  1428,  1456,  1484,  1512,  1540,  1568, 
     1596,  1624,  1652,  1680,  1708,  1736,  1764,  1792,  1820,  1848, 
     1876,  1904,  1932,  1960,  1988,  2016,  2044,  2072,  2100,  2128, 
     2156,  2184,  2212,  2240,  2268,  2296,  2324,  2352
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\2\1\3\1\4\13\2\1\5\5\4\1\6\2\4"+
    "\1\7\1\4\1\10\1\11\1\3\36\0\3\12\7\0"+
    "\1\13\1\0\15\12\3\0\3\12\7\0\1\13\1\0"+
    "\1\12\1\14\13\12\3\0\3\12\7\0\1\13\1\0"+
    "\7\12\1\15\5\12\3\0\3\12\7\0\1\13\1\0"+
    "\1\12\1\16\13\12\3\0\3\12\7\0\1\13\1\0"+
    "\5\12\1\17\7\12\3\0\3\12\7\0\1\13\1\0"+
    "\4\12\1\20\10\12\16\0\1\21\20\0\3\12\7\0"+
    "\1\13\1\0\2\12\1\22\12\12\3\0\3\12\7\0"+
    "\1\13\1\0\10\12\1\23\4\12\3\0\3\12\7\0"+
    "\1\13\1\0\1\12\1\24\13\12\3\0\3\12\7\0"+
    "\1\13\1\0\1\12\1\25\13\12\3\0\3\12\7\0"+
    "\1\13\1\0\12\12\1\26\2\12\3\0\1\27\1\30"+
    "\12\0\15\27\2\0\1\31\3\12\7\0\1\13\1\0"+
    "\15\12\3\0\3\12\7\0\1\13\1\0\6\12\1\32"+
    "\6\12\3\0\3\12\7\0\1\13\1\0\5\12\1\33"+
    "\7\12\3\0\3\12\7\0\1\13\1\0\10\12\1\34"+
    "\4\12\3\0\3\12\7\0\1\13\1\0\5\12\1\35"+
    "\7\12\3\0\3\27\2\0\1\36\1\0\1\21\1\0"+
    "\1\21\2\0\15\27\4\0\1\30\3\0\1\36\1\0"+
    "\1\21\1\0\1\21\22\0\1\37\13\0\15\37\3\0"+
    "\3\12\7\0\1\13\1\0\2\12\1\40\12\12\3\0"+
    "\3\12\7\0\1\13\1\0\6\12\1\41\6\12\3\0"+
    "\3\12\7\0\1\13\1\0\3\12\1\42\11\12\3\0"+
    "\3\12\7\0\1\13\1\0\6\12\1\43\6\12\3\0"+
    "\2\37\3\0\1\44\6\0\15\37\3\0\3\12\7\0"+
    "\1\13\1\0\1\12\1\45\13\12\3\0\3\12\7\0"+
    "\1\13\1\0\3\12\1\46\11\12\3\0\3\12\7\0"+
    "\1\13\1\0\7\12\1\47\5\12\2\0\1\50\3\12"+
    "\7\0\1\13\1\0\15\12\2\0\1\51\33\0\1\52"+
    "\3\12\7\0\1\13\1\0\15\12\3\0\3\12\7\0"+
    "\1\13\1\0\7\12\1\40\5\12\3\0\3\12\7\0"+
    "\1\13\1\0\10\12\1\53\4\12\3\0\1\54\1\50"+
    "\4\0\1\55\4\0\1\55\15\54\3\0\1\56\13\0"+
    "\15\56\3\0\1\57\13\0\15\57\3\0\3\12\7\0"+
    "\1\13\1\0\6\12\1\45\6\12\3\0\3\60\11\0"+
    "\15\60\2\0\1\61\1\62\1\55\12\0\15\62\3\0"+
    "\2\56\4\0\1\63\4\0\1\63\15\56\3\0\2\57"+
    "\3\0\1\36\2\0\1\52\3\0\15\57\3\0\3\60"+
    "\3\0\1\55\4\0\1\55\15\60\6\0\1\64\30\0"+
    "\3\65\11\0\15\65\3\0\2\66\12\0\15\66\7\0"+
    "\1\36\26\0\1\61\3\65\11\0\15\65\10\0\1\67"+
    "\25\0\1\70\34\0\1\71\13\0\15\71\3\0\2\71"+
    "\5\0\1\72\4\0\15\71\12\0\1\73\23\0\1\74"+
    "\37\0\1\75\27\0\1\76\34\0\1\77\3\0\1\36"+
    "\7\0\6\77\1\100\2\77\1\101\1\77\1\102\1\77"+
    "\3\0\3\77\7\0\1\103\1\0\15\77\3\0\3\77"+
    "\7\0\1\103\1\0\7\77\1\104\5\77\3\0\3\77"+
    "\7\0\1\103\1\0\1\77\1\105\13\77\3\0\3\77"+
    "\7\0\1\103\1\0\5\77\1\106\7\77\16\0\1\107"+
    "\20\0\3\77\7\0\1\103\1\0\10\77\1\110\4\77"+
    "\3\0\3\77\7\0\1\103\1\0\1\77\1\111\13\77"+
    "\3\0\3\77\7\0\1\103\1\0\1\77\1\112\13\77"+
    "\3\0\1\113\1\114\12\0\15\113\3\0\3\77\7\0"+
    "\1\103\1\0\6\77\1\115\6\77\3\0\3\77\7\0"+
    "\1\103\1\0\5\77\1\116\7\77\3\0\3\77\7\0"+
    "\1\103\1\0\10\77\1\117\4\77\3\0\3\113\2\0"+
    "\1\75\1\0\1\107\1\0\1\107\2\0\15\113\4\0"+
    "\1\114\3\0\1\75\1\0\1\107\1\0\1\107\22\0"+
    "\3\77\7\0\1\103\1\0\2\77\1\120\12\77\3\0"+
    "\3\77\7\0\1\103\1\0\6\77\1\121\6\77\3\0"+
    "\3\77\7\0\1\103\1\0\3\77\1\122\11\77\3\0"+
    "\3\77\7\0\1\103\1\0\1\77\1\123\13\77\3\0"+
    "\3\77\7\0\1\103\1\0\3\77\1\124\11\77\3\0"+
    "\3\77\7\0\1\103\1\0\7\77\1\125\5\77\2\0"+
    "\1\126\3\77\7\0\1\103\1\0\15\77\3\0\3\77"+
    "\7\0\1\103\1\0\7\77\1\120\5\77\3\0\3\77"+
    "\7\0\1\103\1\0\10\77\1\127\4\77\3\0\1\130"+
    "\13\0\15\130\3\0\3\77\7\0\1\103\1\0\6\77"+
    "\1\123\6\77\3\0\2\130\3\0\1\75\2\0\1\126"+
    "\3\0\15\130\1\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  9,  9,  1,  1,  1,  1,  1,  1,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[2380];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 29: 
          { lexeme=yytext(); return CORRECTO; }
        case 89: break;
        case 1: 
        case 3: 
        case 4: 
        case 5: 
        case 6: 
        case 7: 
        case 8: 
          { return ERROR;  }
        case 90: break;
        case 2: 
          { /*Ignore*/ }
        case 91: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
